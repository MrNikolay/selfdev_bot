import pandas as pd
import telebot
import parser
import const
from telebot import types
from additions import *

token = get_token(param_name='TOKEN')
bot = launch_bot(token=token)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton(const.edit_plan_text)
btn2 = types.KeyboardButton(const.profile_text)
btn3 = types.KeyboardButton(const.reminders_text)
main_markup.row(btn1)
main_markup.row(btn2, btn3)

# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
plan_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton(const.edit_plan_text)
btn2 = types.KeyboardButton(const.back_main)
plan_markup.row(btn1)
plan_markup.row(btn2)

# –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
profile_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton(const.statistics_text)
btn2 = types.KeyboardButton(const.settings_text)
btn3 = types.KeyboardButton(const.back_main)
profile_markup.row(btn1, btn2)
profile_markup.row(btn3)

# –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫
reminder_markup = None  # P.S: –î–û–î–ï–õ–ê–¢–¨!

# –ú–µ–Ω—é –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
start_attempt_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton(const.start_attempt_text)
start_attempt_markup.row(btn1)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
continue_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton(const.continue_text)
continue_markup.row(btn1)



def main_menu(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '', reply_markup=main_markup)


def my_plan(message):
    chat_id = message.chat.id
    print(chat_id)

    user_id = parser.get_user_id_of_chat(chat_id)
    attempt = parser.get_current_attempt(user_id)
    if attempt is None:
        return bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –í–µ—Ä–æ—è—Ç–Ω–æ, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É!', reply_markup=start_attempt_markup)

    day = parser.get_current_day_of_attempt(attempt.attempt_id)
    tasks = parser.get_tasks_of_day(day.day_id)



    mess = f'–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å ‚Ññ{day.relative_pos}\n\n'

    if tasks.shape[0] == 0:
        mess += '- –í—ã –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å'

    else:
        tasks.sort_values('is_completed', inplace=True, ascending=False)
        for row_tuple in tasks.iterrows():
            task = row_tuple[1]

            sign = '‚úÖ' if task.is_completed else '‚ùå'

            mess += f'{sign} - {task.task_name}\n'

        mess += f'\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {tasks.is_completed.sum()}/{tasks.shape[0]}'

    bot.send_message(chat_id, mess, reply_markup=main_markup)


def edit_plan(message) -> None:
    chat_id = message.chat.id

    user_id = parser.get_user_id_of_chat(chat_id)
    attempt_id = parser.get_current_attempt(user_id).attempt_id
    day_id = parser.get_current_day_of_attempt(attempt_id).day_id
    tasks = parser.get_tasks_of_day(day_id).sort_values('is_completed', ascending=False)

    edit_menu_markup = types.InlineKeyboardMarkup()
    for row_tuple in tasks.iterrows():
        task = row_tuple[1]
        sign = '‚úÖ' if task.is_completed else '‚ùå'
        text = f'{sign} - {task.task_name}'
        button = types.InlineKeyboardButton(text, callback_data=f'view_task_{task.task_id}')
        edit_menu_markup.row(button)

    add_text = '+' if tasks.shape[0] else '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'


    btn1 = types.InlineKeyboardButton(add_text, callback_data='add_task')
    btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data='delete_all_tasks')
    btn3 = types.InlineKeyboardButton(const.back_main, callback_data='go_back')

    if tasks.shape[0] < 9:
        edit_menu_markup.row(btn1)

    if tasks.shape[0]:
        edit_menu_markup.row(btn2)

    edit_menu_markup.row(btn3)

    mess = '–†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–¥–∞—á'

    bot.send_message(chat_id, mess, reply_markup=edit_menu_markup)


def view_task(message, task_id: int) -> None:
    chat_id = message.chat.id
    task = parser.get_task(task_id)

    task_name = task.task_name

    mess = f'–ó–∞–¥–∞—á–∞: {task_name}\n'
    mess += f'–°—Ç–∞—Ç—É—Å: {'‚úÖ' if task.is_completed == 1 else '‚ùå'}'

    if task.is_completed == 1:
        btn1 = types.InlineKeyboardButton('‚ùå –£–±—Ä–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data=f'mark_complete_{task_id}')

    else:
        btn1 = types.InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data=f'mark_complete_{task_id}')

    btn2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', callback_data=f'EditText_task_{task_id}')
    btn3 = types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data=f'delete_task_{task_id}')
    btn4 = types.InlineKeyboardButton(const.back_main, callback_data='go_back_edit')

    edit_task_markup = types.InlineKeyboardMarkup()
    edit_task_markup.row(btn1)
    edit_task_markup.row(btn2, btn3)
    edit_task_markup.row(btn4)

    bot.edit_message_text(mess, chat_id, message.message_id, reply_markup=edit_task_markup)

def add_task(message) -> None:
    @bot.message_handler(content_types=['text'])
    def message_input_step(message):
        chat_id = message.chat.id
        if message.text == const.back_edit:
            return general_message_handler(message)

        bot.delete_messages(message.chat.id, [message.message_id, message.message_id - 1])
        task_name = message.text

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(const.back_main, callback_data='go_back_add_task')
        markup.row(button)

        if len(task_name) <= 64:
            user_id = parser.get_user_id_of_chat(message.chat.id)
            attempt_id = parser.get_current_attempt(user_id).attempt_id
            day_id = parser.get_current_day_of_attempt(attempt_id).day_id
            tasks = parser.get_tasks_of_day(day_id)

            if tasks[tasks.task_name == task_name].shape[0] == 0:
                data = [[day_id, task_name, 0]]
                parser.sqlwrapper.append_data('tasks', pd.DataFrame(data, columns=['day_id', 'task_name', 'is_completed']))

                #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                #button = types.KeyboardButton(const.back_edit)
                #markup.row(button)

                bot.delete_messages(chat_id, [message.message_id, message.message_id - 1])
                edit_plan(message)

            else:
                mess = '–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                bot.send_message(chat_id, mess, reply_markup=markup)

        else:
            mess = '–û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏'
            bot.send_message(chat_id, mess, reply_markup=markup)

    chat_id = message.chat.id

    menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(const.back_edit)
    menu_markup.row(button)

    mess = '–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É: '

    msg = bot.send_message(chat_id, mess, reply_markup=menu_markup)
    bot.register_next_step_handler(msg, message_input_step)

def my_profile(message) -> None:
    chat_id = message.chat.id
    ...

def start_attempt(message) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    user_id = parser.get_user_id_of_chat(chat_id)

    current_attempt = parser.get_current_attempt(user_id)
    if current_attempt is not None:  # –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –∏–º–µ–µ—Ç—Å—è
        are_you_sure_markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–î–∞', callback_data='start_new_attempt')
        btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='go_back')
        are_you_sure_markup.row(btn1, btn2)

        current_day = parser.get_current_day_of_attempt(current_attempt.attempt_id)
        mess = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞!\n'
        mess += f'–ö–æ–ª-–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {current_day.relative_pos}\n'
        mess += '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?'

        bot.send_message(chat_id, mess, reply_markup=are_you_sure_markup)


    else:  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
        parser.start_new_attempt_of_user(user_id)

        if parser.get_current_attempt(user_id) is not None:  # –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            mess = '–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É\n'
            mess += '–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ ...\n'
            mess += '–ß—Ç–æ-–∂, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å!'
            bot.send_message(chat_id, mess, reply_markup=continue_markup)

        else:  # —Å–ª—É—á–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞
            bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

def delete_all_tasks(message) -> None:
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–î–∞', callback_data='yes_delete_all')
    btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='go_back_edit')
    markup.row(btn1, btn2)

    msg = bot.edit_message_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏?', chat_id, message.message_id, reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message) -> None:
    chat_id = message.chat.id

    if not parser.get_user_id_of_chat(chat_id): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        mess = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ...\n"
        mess += "–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º–∏!\n"
        mess += "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, –∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞ –≤—Å—ë–º –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è!\n"
        mess += "–ò—Ç–∞–∫, —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É, —Ä–∞–∑–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏ –≤ —Ü–µ–ª–æ–º, —Å—Ç–∞—Ç—å –ª—É—á—à–µ? –Ø –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º.\n\n\n"
        bot.send_message(chat_id, mess, reply_markup=continue_markup)
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        parser.sqlwrapper.append_data('users', pd.DataFrame([[chat_id]], columns=['chat_id']))

    else:
        general_message_handler(message)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback) -> None:
    chat_id = callback.message.chat.id
    user_id = parser.get_user_id_of_chat(chat_id)

    if callback.data == 'start_new_attempt':  # –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É (–Ω–∞–∂–∞–ª "–¥–∞")
        current_attempt = parser.get_current_attempt(user_id)
        parser.finish_the_attempt(current_attempt)
        start_attempt(callback.message)

    elif callback.data == 'go_back':  # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
        msg_id = callback.message.message_id
        bot.delete_message(chat_id, msg_id)
        my_plan(callback.message)

    elif callback.data == 'go_back_edit':
        msg_id = callback.message.message_id
        bot.delete_message(chat_id, msg_id)
        edit_plan(callback.message)

    elif callback.data == 'go_back_add_task':
        msg_id = callback.message.message_id
        bot.delete_message(chat_id, msg_id)
        add_task(callback.message)

    elif 'view_task_' in callback.data:  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        task_id = int(callback.data.split('_')[2])
        view_task(callback.message, task_id)

    elif 'delete_task_' in callback.data:  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        task_id = int(callback.data.split('_')[2])
        parser.delete_task(task_id)
        bot.delete_message(chat_id, callback.message.message_id)
        edit_plan(callback.message)

    elif 'mark_complete_' in callback.data:  # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_id = int(callback.data.split('_')[2])
        task = parser.get_task(task_id)
        parser.set_status_task(task_id, abs(task.is_completed - 1))
        view_task(callback.message, task_id)

    elif callback.data == 'add_task':  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        bot.delete_message(chat_id, callback.message.message_id)
        add_task(callback.message)

    elif callback.data == 'delete_all_tasks':  # –£–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ –∑–∞–¥–∞—á–∏
        delete_all_tasks(callback.message)

    elif callback.data == 'yes_delete_all':
        chat_id = callback.message.chat.id
        user_id = parser.get_user_id_of_chat(chat_id)
        attempt_id = parser.get_current_attempt(user_id).attempt_id
        day_id = parser.get_current_day_of_attempt(attempt_id).day_id
        tasks = parser.get_tasks_of_day(day_id)

        for i, task in tasks.iterrows():
            parser.delete_task(task.task_id)

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(const.back_edit, callback_data='go_back_edit')
        markup.row(button)

        bot.delete_message(chat_id, callback.message.message_id)
        bot.send_message(chat_id, '–í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', reply_markup=markup)

    else:  # –¥–ª—è –¥–µ–±–∞–≥–∏–Ω–≥–∞ (–º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
        bot.send_message(chat_id, '–Ø –Ω–µ –ø–æ–Ω—è–ª callback (—Ñ—É–Ω–∫—Ü–∏—è: callback_message())')


@bot.message_handler(commands=['test'])
def test(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ( –ü–†–ò –î–ï–ü–õ–û–ï –£–î–ê–õ–ò–¢–¨! )"""
    msg = bot.send_message(message.chat.id, 'some text', reply_markup=plan_markup)


@bot.message_handler(content_types=['text'])
def general_message_handler(message):
    chat_id = message.chat.id
    #delete_previos_messages(message, bot, 2)
    bot.delete_messages(chat_id, [message.message_id, message.message_id - 1, message.message_id - 2])

    if message.text == const.edit_plan_text:  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
        edit_plan(message) # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞

    elif message.text == const.profile_text:  # –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        my_profile(message)

    elif message.text == const.back_main:  # –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        my_plan(message)

    elif message.text == const.back_edit:  # –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_plan(message)

    elif message.text == const.start_attempt_text:  # –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
        start_attempt(message)

    elif message.text == const.continue_text:  # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        my_plan(message)

    else:
        bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É', reply_markup=continue_markup)


print(Fore.RED + '*' + Style.RESET_ALL + ' –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')
bot.polling(none_stop=True)  # P.S: –° –ë–æ–≥–æ–º! ;)